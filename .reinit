#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');
const cp = require('child_process');


const resetPackageJson = (ctx) => {
  let pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  delete pkg.scripts.preinstall;
  pkg.name = ctx.app;
  pkg.description = '';
  pkg.version = '0.0.0-development';
  pkg.keywords = [];
  pkg.repository = `${ctx.githost}:${ctx.org}/${ctx.app}`;
  // remove scripts from distributed files
  pkg.files = [
    'dist',
    'docs'
  ];
  fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2), 'utf8');
}

// Since this is a meta-script, it's not fair
// to install dev-dependencies. We have simpler
// local implementations of necessary npm modules,
// allowing us to do the needful.
// Post a first run, this file will be deleted from
// the cloned repo.

function sed(fname, match_re, replacement) {
  const content = fs.readFileSync(fname, 'utf8');
  fs.writeFileSync(fname, content.replace(match_re, replacement), 'utf8');
}

function rimraf(dir) {
  // console.log(`deleting ${dir}`);
  if (dir === '/') return;
  if (fs.existsSync(dir)) {
    fs.readdirSync(dir).forEach(function (file, index) {
      var curdir = path.join(dir, file);
      if (fs.lstatSync(curdir).isDirectory()) { // recurse
        rimraf(curdir);
      } else { // delete file
        fs.unlinkSync(curdir);
      }
    });
    fs.rmdirSync(dir);
  }
};

function spawn(cmd, args, opts) {
  opts = opts || {
    cwd: process.cwd(),
    stdio: 'inherit'
  };
  console.log([cmd].concat(args).join(' '));
  return new Promise((resolve, reject) => {
    const proc = cp.spawn(cmd, args, opts);
    proc.on('close', code => {
      code ? reject(code) : resolve()
    });
  });
}

if (require.main !== module) {
  // this file is being included as a library
  // export the utility functions defined within
  module.exports = {
    resetPackageJson,
    spawn,
    rimraf,
    sed
  }
} else {
  // this is the purpose
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  // defaults
  const app = path.basename(process.cwd());
  let result = {};

  return new Promise((resolve, reject) => {
    rl.question(`Name of the project (${app}): `, (answer) => {
      result.app = answer || app;
      return resolve(result);
    });
  }).then((result) => {
    const re = {
      app: /node-starter/g
    };
    resetPackageJson(result);
    // reset changelog.md
    fs.writeFileSync('CHANGELOG.md', '', 'utf8');
    // sed('./package.json', re.app, result.app);
    sed('./README.md', /node-starter/, result.app);
    console.log(`project renamed to ${result.app}`);
    return result;
  }).then(result => {
    // delete old git repo and initialize a new one.
    rimraf(path.join(process.cwd(), '.git'));
    rimraf(path.join(process.cwd(), 'scripts'));
    return result;
  }).then(result => {
    // initialize new git repo
    return spawn('git', ['init']).then(() => result);
  }).then(result => {
    fs.unlinkSync('.reinit');
    fs.unlinkSync('.travis.yml');
    fs.renameSync('_travis.yml', '.travis.yml');
    return result;
  }).then(result => {
    return spawn(`npm`, [`install`]).then(() => result);
  }).then(result => {
    return spawn(`npm`, [`run`, `build`]).then(() => result);
  }).then(result => {
    return spawn(`git`, [`add`, `.`, `--all`]).then(() => result);
  }).then(result => {
    return spawn(`git`, [
      `remote`,
      `add`,
      `origin`,
      `https://github.com/tufan-io/${result.app}.git`
    ]).then(() => result);
  }).then(result => {
    console.log(``);
    console.log(`TODO: configure git username and email before committing`);
    console.log(``);
    console.log(`    git config user.name \"John Doe\"`);
    console.log(`    git config user.email john@doe.com`);
    console.log(``);
    console.log(`---`);
    console.log(`The repo has been properly re-initialized.`);
    console.log(`Go forth and make a brave new npm package...`);
    console.log(`---`);
    process.exit(0);
  }).catch(err => console.error(err))
};
